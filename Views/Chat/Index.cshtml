@{
    var userId = ViewBag.UserId;
    var username = ViewBag.Username;
    var users = ViewBag.Users as IEnumerable<MongoDbTutorial.Models.Users.User>;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>ChatApp</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
    <style>
        .chat-app {
            height: 90vh;
            display: flex;
            border: 1px solid #ccc;
        }

        .chat-users {
            width: 25%;
            border-right: 1px solid #ddd;
            overflow-y: auto;
        }

            .chat-users .list-group-item.active {
                background-color: #0d6efd;
                color: #fff;
            }

        .chat-window {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        #chatWindow {
            flex-grow: 1;
            padding: 15px;
            background: #f8f9fa;
            overflow-y: auto;
        }

        .message-bubble {
            max-width: 60%;
            padding: 8px 12px;
            margin: 5px;
            border-radius: 18px;
            font-size: 14px;
            line-height: 1.3;
            display: inline-block;
            clear: both;
            position: relative;
        }

            .message-bubble.own {
                background: #d9fdd3; /* WhatsApp green */
                float: right;
                border-bottom-right-radius: 4px;
            }

            .message-bubble.other {
                background: #fff;
                float: left;
                border: 1px solid #ccc;
                border-bottom-left-radius: 4px;
            }

        .message-time {
            font-size: 11px;
            color: gray;
            margin-left: 5px;
        }

        .typing-indicator {
            font-style: italic;
            color: gray;
            font-size: 0.9em;
            margin: 5px 0;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <nav class="navbar navbar-light bg-light mb-2">
            <span class="navbar-brand">ChatApp - @username</span>
            <a class="btn btn-outline-danger" href="/Account/Logout">Logout</a>
        </nav>

        <div class="chat-app">
            <!-- Users list -->
            <div class="chat-users">
                <ul class="list-group list-group-flush" id="userList">
                    @foreach (var user in users)
                    {
                        <li class="list-group-item user-item d-flex justify-content-between align-items-center" data-user-id="@user.Id">
                            <span>@user.Username</span>
                            <span class="badge bg-danger unread-count" id="unread-@user.Id" style="display:none;">0</span>
                        </li>
                    }
                </ul>
            </div>

            <!-- Chat Window -->
            <div class="chat-window">
                <div id="chatHeader" class="p-2 border-bottom bg-light fw-bold">
                    Select a user
                </div>
                <div id="chatWindow">
                    <p class="text-muted">No conversation selected.</p>
                </div>
                <div id="typingIndicator" class="typing-indicator px-3" style="display:none;">
                    User is typing...
                </div>
                <div class="chat-input border-top p-2">
                    <div class="input-group">
                        <input type="text" id="messageInput" class="form-control" placeholder="Type a message..." />
                        <button id="sendBtn" class="btn btn-primary">Send</button>
                        <button id="sendOneTimeBtn" class="btn btn-primary">1</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

    <script>
        const userId = '@userId';
        let selectedUserId = null;
        let selectedUsername = null;
        let typingTimeout;

        const connection = new signalR.HubConnectionBuilder().withUrl('/chathub').build();

        connection.start().then(() => {
            connection.invoke('Register', userId);
        }).catch(err => console.error(err.toString()));

        // receive new message
        connection.on('ReceiveMessage', (msg) => {
            if (selectedUserId === msg.from) {
                appendMessage(msg, false);
                fetch('/Chat/MarkRead', { method: 'POST', headers: {'Content-Type':'application/json'}, body: JSON.stringify({ fromUserId: msg.from }) });
            } else {
                const badge = document.getElementById('unread-' + msg.from);
                if (badge) {
                    badge.style.display = 'inline-block';
                    badge.innerText = (parseInt(badge.innerText || '0') + 1).toString();
                }
                showNotification(msg.fromName, msg.message);
            }
        });

        // own message confirmation
        connection.on('MessageSent', (msg) => {
            appendMessage(msg, true);
        });

        
        connection.on('UserTyping', (fromUserId) => {
            if (selectedUserId === fromUserId) {
                document.getElementById('typingIndicator').style.display = 'block';
                clearTimeout(typingTimeout);
                typingTimeout = setTimeout(() => {
                    document.getElementById('typingIndicator').style.display = 'none';
                }, 1500);
            }
        });

        // append message bubble
        function appendMessage(msg, isOwn) {
            const div = document.createElement('div');
            div.classList.add('message-bubble', isOwn ? 'own' : 'other');
            let senderLabel = isOwn ? '' : `<strong>${selectedUsername}</strong><br>`;
            let time = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            div.innerHTML = `${senderLabel}${msg.message}<div class="message-time">${time}</div>`;
            document.getElementById('chatWindow').appendChild(div);
            document.getElementById('chatWindow').scrollTop = document.getElementById('chatWindow').scrollHeight;
        }

        // select user
        document.querySelectorAll('.user-item').forEach(item => {
            item.addEventListener('click', () => {
                document.querySelectorAll('.user-item').forEach(i => i.classList.remove('active'));
                item.classList.add('active');

                selectedUserId = item.getAttribute('data-user-id');
                selectedUsername = item.querySelector('span').innerText;
                document.getElementById('chatHeader').innerText = selectedUsername;
                document.getElementById('chatWindow').innerHTML = '';

                const badge = document.getElementById('unread-' + selectedUserId);
                if (badge) { badge.style.display = 'none'; badge.innerText = '0'; }

                fetch('/Chat/Conversation?otherUserId=' + selectedUserId)
                    .then(r => r.json())
                    .then(msgs => {
                        msgs.forEach(m => appendMessage(m, m.from === userId));
                        fetch('/Chat/MarkRead', { method: 'POST', headers: {'Content-Type':'application/x-www-form-urlencoded'}, body: 'fromUserId=' + encodeURIComponent(selectedUserId) });
                    });
            });
        });

        // send message
        document.getElementById('sendBtn').addEventListener('click', () => sendMessage(false));

        document.getElementById('messageInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage(false);
            else connection.invoke('Typing', userId, selectedUserId);
        });

        document.getElementById('sendOneTimeBtn').addEventListener('click', () => sendMessage(true));
       

        function sendMessage(oneTime) {
            const text = document.getElementById('messageInput').value;
            if (!selectedUserId) return;
            if (!text.trim()) return;

            console.log(oneTime);
            console.log(text);
            console.log(userId);
            console.log(selectedUserId);

            connection.invoke('SendMessage', userId, selectedUserId, text, oneTime);
            document.getElementById('messageInput').value = '';
        }

        function showNotification(from, message) {
            if (Notification.permission === "granted") {
                new Notification(`💬 New message from ${from}`, { body: message });
            } else if (Notification.permission !== "denied") {
                Notification.requestPermission().then(p => {
                    if (p === "granted") new Notification(`💬 New message from ${from}`, { body: message });
                });
            }
        }
    </script>
</body>
</html>
